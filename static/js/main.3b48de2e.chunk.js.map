{"version":3,"sources":["images/rainbow-bg.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","theme","createMuiTheme","useStyles","makeStyles","paperPadding","padding","spacing","title","fontFamily","fontSize","fontWeight","textAlign","subtitle","border","width","height","maxWidth","maxHeight","position","left","top","transform","outerBorder","footer","bottom","socialIcon","App","classes","className","src","require","style","alt","Paper","elevation","ThemeProvider","Typography","variant","Grid","container","justify","item","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,wC,oICKvCC,EAAQC,cAENC,EAAYC,aAAW,SAACH,GAAD,MAAY,CACvCI,aAAc,CACZC,QAASL,EAAMM,QAAQ,EAAG,IAE5BC,MAAO,CACLC,WAAY,YACZC,SAAU,GACVC,WAAY,OACZC,UAAW,UAEbC,SAAU,CACRP,QAASL,EAAMM,QAAQ,EAAG,EAAG,EAAG,GAChCG,SAAU,GACVE,UAAW,UAEbE,OAAQ,CACNC,MAAO,OACPC,OAAQ,OACRC,SAAU,IACVC,UAAW,IACXC,SAAU,WACVC,KAAM,MACNC,IAAK,MACLC,UAAW,yBAEbC,YAAa,CACXR,MAAO,OACPC,OAAQ,OACRC,SAAU,IACVC,UAAW,IACXC,SAAU,WACVC,KAAM,MACNC,IAAK,MACLC,UAAW,yBAEbE,OAAQ,CACNL,SAAU,WACVM,OAAQ,EACRV,MAAO,OACPH,UAAW,UAEbc,WAAY,CACVP,SAAU,WACVH,OAAQ,WAmFGW,EA/EH,WACV,IAAMC,EAAUzB,IAEhB,OACE,6BACE,yBAAK0B,UAAWD,EAAQL,aACtB,yBACEO,IAAKC,EAAQ,IACbC,MAAO,CACLjB,MAAO,OACPC,OAAQ,OACRG,SAAU,YAEZc,IAAI,wBAGR,yBAAKJ,UAAWD,EAAQd,QACtB,kBAACoB,EAAA,EAAD,CAAOL,UAAWD,EAAQvB,aAAc8B,UAAW,IACjD,yBAAKN,UAAWD,EAAQpB,OAAxB,YACA,yBAAKqB,UAAWD,EAAQf,UACtB,kBAACuB,EAAA,EAAD,CAAenC,MAAOA,GACpB,kBAACoC,EAAA,EAAD,CAAYR,UAAWD,EAAQf,SAAUyB,QAAQ,MAAjD,sBAEE,6BAFF,0CAQR,yBAAKT,UAAWD,EAAQJ,QACtB,kBAACU,EAAA,EAAD,CAAOC,UAAW,GAAIN,UAAWD,EAAQvB,cACvC,kBAACkC,EAAA,EAAD,CAAMC,WAAS,EAACjC,QAAS,EAAGkC,QAAQ,UAClC,kBAACF,EAAA,EAAD,CAAMG,MAAI,GACR,uBAAGC,KAAK,oCACN,yBACEb,IAAI,oDACJG,IAAI,wBACJjB,OAAO,OACPD,MAAM,WAIZ,kBAACwB,EAAA,EAAD,CAAMG,MAAI,GACR,uBAAGC,KAAK,sBACN,yBACEb,IAAI,sDACJG,IAAI,oBACJjB,OAAO,OACPD,MAAM,WAIZ,kBAACwB,EAAA,EAAD,CAAMG,MAAI,GACR,uBAAGC,KAAK,yCACN,yBACEb,IAAI,oDACJG,IAAI,yBACJjB,OAAO,OACPD,MAAM,WAIZ,kBAACwB,EAAA,EAAD,CAAMG,MAAI,GACR,uBAAGC,KAAK,oCACN,yBACEb,IAAI,oDACJG,IAAI,eACJjB,OAAO,OACPD,MAAM,gBC9GJ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3b48de2e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rainbow-bg.c3abba50.png\";","import React from \"react\";\nimport { Paper, Typography, ThemeProvider, Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { createMuiTheme, responsiveFontSizes } from \"@material-ui/core/styles\";\n\nlet theme = createMuiTheme();\n\nconst useStyles = makeStyles((theme) => ({\n  paperPadding: {\n    padding: theme.spacing(2, 4),\n  },\n  title: {\n    fontFamily: \"Comfortaa\",\n    fontSize: 15,\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n  },\n  subtitle: {\n    padding: theme.spacing(2, 0, 0, 0),\n    fontSize: 14,\n    textAlign: \"center\",\n  },\n  border: {\n    width: \"72vw\",\n    height: \"13vh\",\n    maxWidth: 500,\n    maxHeight: 100,\n    position: \"absolute\",\n    left: \"50%\",\n    top: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n  outerBorder: {\n    width: \"73vw\",\n    height: \"15vh\",\n    maxWidth: 520,\n    maxHeight: 140,\n    position: \"absolute\",\n    left: \"50%\",\n    top: \"51%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n  footer: {\n    position: \"absolute\",\n    bottom: 0,\n    width: \"100%\",\n    textAlign: \"center\",\n  },\n  socialIcon: {\n    position: \"absolute\",\n    height: \"85%\",\n  },\n}));\n\nconst App = () => {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <div className={classes.outerBorder}>\n        <img\n          src={require(\"./images/rainbow-bg.png\")}\n          style={{\n            width: \"100%\",\n            height: \"100%\",\n            position: \"absolute\",\n          }}\n          alt=\"Rainbow background\"\n        />\n      </div>\n      <div className={classes.border}>\n        <Paper className={classes.paperPadding} elevation={10}>\n          <div className={classes.title}>tancredo</div>\n          <div className={classes.subtitle}>\n            <ThemeProvider theme={theme}>\n              <Typography className={classes.subtitle} variant=\"h6\">\n                Changing the world,\n                <br /> one line of clean code at a time.\n              </Typography>\n            </ThemeProvider>\n          </div>\n        </Paper>\n      </div>\n      <div className={classes.footer}>\n        <Paper elevation={10} className={classes.paperPadding}>\n          <Grid container spacing={3} justify=\"center\">\n            <Grid item>\n              <a href=\"https://twitter.com/aqueletantan\">\n                <img\n                  src=\"https://image.flaticon.com/icons/svg/81/81725.svg\"\n                  alt=\"Tan's Twitter Profile\"\n                  height=\"40vh\"\n                  width=\"40vh\"\n                />\n              </a>\n            </Grid>\n            <Grid item>\n              <a href=\"https://dev.to/tan\">\n                <img\n                  src=\"https://d2fltix0v2e0sb.cloudfront.net/dev-badge.svg\"\n                  alt=\"Tan's DEV Profile\"\n                  height=\"40vh\"\n                  width=\"40vh\"\n                />\n              </a>\n            </Grid>\n            <Grid item>\n              <a href=\"https://linkedin.com/in/tancredosouza\">\n                <img\n                  src=\"https://image.flaticon.com/icons/svg/61/61109.svg\"\n                  alt=\"Tan's LinkedIn Profile\"\n                  height=\"36vh\"\n                  width=\"36vh\"\n                />\n              </a>\n            </Grid>\n            <Grid item>\n              <a href=\"https://github.com/tancredosouza\">\n                <img\n                  src=\"https://image.flaticon.com/icons/svg/25/25231.svg\"\n                  alt=\"Tan's Github\"\n                  height=\"36vh\"\n                  width=\"36vh\"\n                />\n              </a>\n            </Grid>\n          </Grid>\n        </Paper>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}